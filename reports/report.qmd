---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-SriramSathvik>


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")
```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")
```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")
```

## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select 
  `Long Name`
from
    world_bank_data.wdi_country
where
    region is NULL
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
SET FOREIGN_KEY_CHECKS = 0;
DROP TABLE IF EXISTS countries;
DROP TABLE IF EXISTS departments;
DROP TABLE IF EXISTS emp_details_view;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS job_grades;
DROP TABLE IF EXISTS job_history;
DROP TABLE IF EXISTS jobs;
DROP TABLE IF EXISTS locations;
DROP TABLE IF EXISTS people;
DROP TABLE IF EXISTS peopleroles;
DROP TABLE IF EXISTS peopleskills;
DROP TABLE IF EXISTS regions;
DROP TABLE IF EXISTS roles;
DROP TABLE IF EXISTS skills;
DROP TABLE IF EXISTS wdi_country;
SET FOREIGN_KEY_CHECKS = 1;
""")
```

```{python}
# create table
execute_ddl(cnx,"""
create table wdi_country as
select
  *
from
  world_bank_data.wdi_country
where
  not region is NULL
""")
```

```{python}
# show number of records
run_sql_and_return_html(cnx,"""
select count(*) from wdi_country
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select count(*) from wdi_country;
""")
```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
select
  `Region`
from
  wdi_country
group by
  `Region`
order by
  `Region`
""")
```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select
  `Region` ,count(*) as "Count"
from
  wdi_country
group by
  `Region`
order by
  `Count` desc
""")
```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select `Long Name`, `Region`
from wdi_country
where `Region`='North America'
""")
```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select `Region`, `Short Name`, `Long Name`
from wdi_country
where `Short Name`='Qatar'
""")
```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select `Country Code`,`Short Name`, `2-alpha code`, `WB-2 code`, `Region`
from wdi_country
where
`2-alpha code` <> `WB-2 code`
""")
```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select `Income Group`, count(*) as "Count" from wdi_country
group by `Income Group`
""")
```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
select `Short Name`, `Income Group`, count(*) over() as "Count"
from 
  wdi_country
where `Income Group` is null
order by
`Short Name`;
""")
```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx,"""
update
  wdi_country
set
  `Income Group` = 'High income'
where
  `Short Name` = 'Venezuela';
commit;
""")
```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx,"""
select `Short Name`,`Income Group`, count(*) over() as "Count"
from 
  wdi_country
where
  `Short Name` = 'Venezuela';
""")
```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select
  `Region`,
  `Income Group`,
  count(*) as "No. of Countries"
from
  wdi_country
group by
  `Region`, `Income Group`
order by
  `Region`, `Income Group`
""")
```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx, """
SELECT
  `Region`,
  COUNT(CASE WHEN `Income Group` = 'High income' THEN 1.0 END) * 1.0 AS "High income",
  COUNT(CASE WHEN `Income Group` = 'Upper middle income' THEN 1.0 END) * 1.0 AS "Upper middle income",
  COUNT(CASE WHEN `Income Group` = 'Lower middle income' THEN 1.0 END) * 1.0 AS "Lower middle income",
  COUNT(CASE WHEN `Income Group` = 'Low income' THEN 1.0 END) * 1.0 AS "Low income",
  COUNT(CASE WHEN `Income Group` IS NOT NULL THEN 1.0 END) * 1.0 AS "Row Total"
FROM
  wdi_country
GROUP BY
  `Region`
ORDER BY
  `Region`
""")
```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Low Income Count",
  `Region`,
  `Income Group`
from
  wdi_country
where
  `Income Group` = 'Low income'
group by
  `Region`, `Income Group`
order by
  count(*) desc
limit 1
""")
```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
select
  `Country Code`, `Short Name`, `Region`, `Income Group`
from
  wdi_country
where
  `Region` = (
    select `Region` from wdi_country where `Country Code` = 'MHL'
  )
  and `Income Group` = (
    select `Income Group` from wdi_country where `Country Code` = 'MHL'
  )
order by
  `Short Name`
""")
```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
with all_combinations as (
  select 
    r.`Region`, 
    i.`Income Group`
  from
    (select distinct `Region` from wdi_country where `Region` is not null) r
  cross join
    (select distinct `Income Group` from wdi_country where `Income Group` is not null) i
),
actual_counts as (
  select 
    `Region`, 
    `Income Group`, 
    count(*) as Count
  from 
    wdi_country
  where 
    `Region` is not null and `Income Group` is not null
  group by 
    `Region`, `Income Group`
)
select 
  ac.`Region`,
  ac.`Income Group`,
  0 as Count
from 
  all_combinations ac
left join 
  actual_counts acnt
  on ac.`Region` = acnt.`Region` and ac.`Income Group` = acnt.`Income Group`
where 
  acnt.`Region` is null
order by 
  ac.`Region`, ac.`Income Group`
""")
```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
with base as (
  select
    `Region`,
    `Income Group`,
    count(*) as country_count
  from
    wdi_country
  group by
    `Region`, `Income Group`
),
region_totals as (
  select
    `Region`,
    count(*) as region_total
  from
    wdi_country
  group by
    `Region`
),
income_totals as (
  select
    `Income Group`,
    count(*) as income_total
  from
    wdi_country
  group by
    `Income Group`
),
grand_total as (
  select count(*) as total_count from wdi_country
)
select
  b.`Region`,
  b.`Income Group`,
  b.country_count,
  r.region_total,
  i.income_total,
  g.total_count,
  round(100.0 * b.country_count / g.total_count, 2) as percent_of_total
from
  base b
  join region_totals r on b.`Region` = r.`Region`
  join income_totals i on b.`Income Group` = i.`Income Group`
  join grand_total g
order by
  b.`Region`, b.`Income Group`
""")
```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
with base as (
  select
    `Region`,
    `Income Group`,
    count(*) as country_count
  from
    wdi_country
  group by
    `Region`, `Income Group`
),
grand_total as (
  select count(*) as total_count from wdi_country
)
select
  b.`Region`,
  round(100.0 * sum(case when b.`Income Group` = 'High income' then country_count else 0 end) / g.total_count, 2) as "High income",
  round(100.0 * sum(case when b.`Income Group` = 'Upper middle income' then country_count else 0 end) / g.total_count, 2) as "Upper middle income",
  round(100.0 * sum(case when b.`Income Group` = 'Lower middle income' then country_count else 0 end) / g.total_count, 2) as "Lower middle income",
  round(100.0 * sum(case when b.`Income Group` = 'Low income' then country_count else 0 end) / g.total_count, 2) as "Low income",
  round(100.0 * sum(country_count) / g.total_count, 2) as "Row Total"
from
  base b
  cross join grand_total g
group by
  b.`Region`, g.total_count
order by
  b.`Region`
""")
```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
with income_counts as (
  select `Income Group`, count(*) as country_count
  from wdi_country
  where `Income Group` in (
    'High income', 'Upper middle income', 'Lower middle income', 'Low income'
  )
  group by `Income Group`
),
total as (
  select count(*) as total_count from wdi_country
)
select
  i.`Income Group`,
  i.country_count,
  t.total_count,
  cast(100.0 * i.country_count / t.total_count as decimal(4,1)) as percent_of_total
from
  income_counts i,
  total t
order by
  i.country_count desc
""")
```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

The skills I am most confident in is making SQL that limits the number of data printes and and what data to be printed. I thnk I need more practice in is more in where core skill as I struggled. This assignement helped me start to buld more advanced SQL skills.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

I started to break down the problem into smaller parts like filtering the data, then grouping it and then testing the output if I was getting errors I would test eah parts individually some parts I had to use google, notes, and lecture to understand what I had to do as I was confused in some parts.


3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

The biggest takeaway for this assignement is about thinking logically to extract information from data and the rules to use query as structure and order in query really matters. I think that this will help me in real world if I am in statistics as you have to deal with a lols of data


# README

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

